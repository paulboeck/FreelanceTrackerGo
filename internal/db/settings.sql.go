// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings.sql

package db

import (
	"context"
)

const getAllSettings = `-- name: GetAllSettings :many
SELECT key, value, data_type, description, created_at, updated_at 
FROM settings 
ORDER BY key
`

func (q *Queries) GetAllSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, getAllSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.Key,
			&i.Value,
			&i.DataType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetting = `-- name: GetSetting :one
SELECT key, value, data_type, description, created_at, updated_at 
FROM settings 
WHERE key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings 
SET value = ?, updated_at = CURRENT_TIMESTAMP 
WHERE key = ?
`

type UpdateSettingParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Value, arg.Key)
	return err
}
