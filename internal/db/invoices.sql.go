// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoices.sql

package db

import (
	"context"
	"time"
)

const deleteInvoice = `-- name: DeleteInvoice :exec
UPDATE invoice 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, project_id, invoice_date, date_paid, payment_terms, amount_due, display_details, updated_at, created_at, deleted_at 
FROM invoice 
WHERE id = ? AND deleted_at IS NULL
`

type GetInvoiceRow struct {
	ID             int64       `json:"id"`
	ProjectID      int64       `json:"project_id"`
	InvoiceDate    time.Time   `json:"invoice_date"`
	DatePaid       interface{} `json:"date_paid"`
	PaymentTerms   string      `json:"payment_terms"`
	AmountDue      float64     `json:"amount_due"`
	DisplayDetails bool        `json:"display_details"`
	UpdatedAt      time.Time   `json:"updated_at"`
	CreatedAt      time.Time   `json:"created_at"`
	DeletedAt      interface{} `json:"deleted_at"`
}

func (q *Queries) GetInvoice(ctx context.Context, id int64) (GetInvoiceRow, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i GetInvoiceRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.InvoiceDate,
		&i.DatePaid,
		&i.PaymentTerms,
		&i.AmountDue,
		&i.DisplayDetails,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getInvoiceForPDF = `-- name: GetInvoiceForPDF :one
SELECT 
    i.id, i.project_id, i.invoice_date, i.date_paid, i.payment_terms, i.amount_due, i.display_details,
    i.updated_at, i.created_at, i.deleted_at,
    p.name as project_name,
    c.name as client_name
FROM invoice i
JOIN project p ON i.project_id = p.id
JOIN client c ON p.client_id = c.id
WHERE i.id = ? AND i.deleted_at IS NULL
`

type GetInvoiceForPDFRow struct {
	ID             int64       `json:"id"`
	ProjectID      int64       `json:"project_id"`
	InvoiceDate    time.Time   `json:"invoice_date"`
	DatePaid       interface{} `json:"date_paid"`
	PaymentTerms   string      `json:"payment_terms"`
	AmountDue      float64     `json:"amount_due"`
	DisplayDetails bool        `json:"display_details"`
	UpdatedAt      time.Time   `json:"updated_at"`
	CreatedAt      time.Time   `json:"created_at"`
	DeletedAt      interface{} `json:"deleted_at"`
	ProjectName    string      `json:"project_name"`
	ClientName     string      `json:"client_name"`
}

func (q *Queries) GetInvoiceForPDF(ctx context.Context, id int64) (GetInvoiceForPDFRow, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceForPDF, id)
	var i GetInvoiceForPDFRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.InvoiceDate,
		&i.DatePaid,
		&i.PaymentTerms,
		&i.AmountDue,
		&i.DisplayDetails,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.ProjectName,
		&i.ClientName,
	)
	return i, err
}

const getInvoicesByProject = `-- name: GetInvoicesByProject :many
SELECT id, project_id, invoice_date, date_paid, payment_terms, amount_due, display_details, updated_at, created_at, deleted_at 
FROM invoice 
WHERE project_id = ? AND deleted_at IS NULL
ORDER BY invoice_date DESC, created_at DESC
`

type GetInvoicesByProjectRow struct {
	ID             int64       `json:"id"`
	ProjectID      int64       `json:"project_id"`
	InvoiceDate    time.Time   `json:"invoice_date"`
	DatePaid       interface{} `json:"date_paid"`
	PaymentTerms   string      `json:"payment_terms"`
	AmountDue      float64     `json:"amount_due"`
	DisplayDetails bool        `json:"display_details"`
	UpdatedAt      time.Time   `json:"updated_at"`
	CreatedAt      time.Time   `json:"created_at"`
	DeletedAt      interface{} `json:"deleted_at"`
}

func (q *Queries) GetInvoicesByProject(ctx context.Context, projectID int64) ([]GetInvoicesByProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getInvoicesByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetInvoicesByProjectRow{}
	for rows.Next() {
		var i GetInvoicesByProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.InvoiceDate,
			&i.DatePaid,
			&i.PaymentTerms,
			&i.AmountDue,
			&i.DisplayDetails,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInvoice = `-- name: InsertInvoice :execlastid
INSERT INTO invoice (project_id, invoice_date, date_paid, payment_terms, amount_due, display_details) 
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertInvoiceParams struct {
	ProjectID      int64       `json:"project_id"`
	InvoiceDate    time.Time   `json:"invoice_date"`
	DatePaid       interface{} `json:"date_paid"`
	PaymentTerms   string      `json:"payment_terms"`
	AmountDue      float64     `json:"amount_due"`
	DisplayDetails bool        `json:"display_details"`
}

func (q *Queries) InsertInvoice(ctx context.Context, arg InsertInvoiceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertInvoice,
		arg.ProjectID,
		arg.InvoiceDate,
		arg.DatePaid,
		arg.PaymentTerms,
		arg.AmountDue,
		arg.DisplayDetails,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateInvoice = `-- name: UpdateInvoice :exec
UPDATE invoice 
SET invoice_date = ?, date_paid = ?, payment_terms = ?, amount_due = ?, display_details = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

type UpdateInvoiceParams struct {
	InvoiceDate    time.Time   `json:"invoice_date"`
	DatePaid       interface{} `json:"date_paid"`
	PaymentTerms   string      `json:"payment_terms"`
	AmountDue      float64     `json:"amount_due"`
	DisplayDetails bool        `json:"display_details"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, updateInvoice,
		arg.InvoiceDate,
		arg.DatePaid,
		arg.PaymentTerms,
		arg.AmountDue,
		arg.DisplayDetails,
		arg.ID,
	)
	return err
}
