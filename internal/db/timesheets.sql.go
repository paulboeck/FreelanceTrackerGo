// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: timesheets.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const deleteTimesheet = `-- name: DeleteTimesheet :exec
UPDATE timesheet 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteTimesheet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTimesheet, id)
	return err
}

const getTimesheet = `-- name: GetTimesheet :one
SELECT id, project_id, work_date, hours_worked, description, updated_at, created_at, deleted_at 
FROM timesheet 
WHERE id = ? AND deleted_at IS NULL
`

type GetTimesheetRow struct {
	ID          int64          `json:"id"`
	ProjectID   int64          `json:"project_id"`
	WorkDate    time.Time      `json:"work_date"`
	HoursWorked float64        `json:"hours_worked"`
	Description sql.NullString `json:"description"`
	UpdatedAt   time.Time      `json:"updated_at"`
	CreatedAt   time.Time      `json:"created_at"`
	DeletedAt   interface{}    `json:"deleted_at"`
}

func (q *Queries) GetTimesheet(ctx context.Context, id int64) (GetTimesheetRow, error) {
	row := q.db.QueryRowContext(ctx, getTimesheet, id)
	var i GetTimesheetRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.WorkDate,
		&i.HoursWorked,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTimesheetsByProject = `-- name: GetTimesheetsByProject :many
SELECT id, project_id, work_date, hours_worked, description, updated_at, created_at, deleted_at 
FROM timesheet 
WHERE project_id = ? AND deleted_at IS NULL
ORDER BY work_date DESC, created_at DESC
`

type GetTimesheetsByProjectRow struct {
	ID          int64          `json:"id"`
	ProjectID   int64          `json:"project_id"`
	WorkDate    time.Time      `json:"work_date"`
	HoursWorked float64        `json:"hours_worked"`
	Description sql.NullString `json:"description"`
	UpdatedAt   time.Time      `json:"updated_at"`
	CreatedAt   time.Time      `json:"created_at"`
	DeletedAt   interface{}    `json:"deleted_at"`
}

func (q *Queries) GetTimesheetsByProject(ctx context.Context, projectID int64) ([]GetTimesheetsByProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimesheetsByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTimesheetsByProjectRow{}
	for rows.Next() {
		var i GetTimesheetsByProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.WorkDate,
			&i.HoursWorked,
			&i.Description,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTimesheet = `-- name: InsertTimesheet :execlastid
INSERT INTO timesheet (project_id, work_date, hours_worked, description) 
VALUES (?, ?, ?, ?)
`

type InsertTimesheetParams struct {
	ProjectID   int64          `json:"project_id"`
	WorkDate    time.Time      `json:"work_date"`
	HoursWorked float64        `json:"hours_worked"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) InsertTimesheet(ctx context.Context, arg InsertTimesheetParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTimesheet,
		arg.ProjectID,
		arg.WorkDate,
		arg.HoursWorked,
		arg.Description,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateTimesheet = `-- name: UpdateTimesheet :exec
UPDATE timesheet 
SET work_date = ?, hours_worked = ?, description = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

type UpdateTimesheetParams struct {
	WorkDate    time.Time      `json:"work_date"`
	HoursWorked float64        `json:"hours_worked"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTimesheet(ctx context.Context, arg UpdateTimesheetParams) error {
	_, err := q.db.ExecContext(ctx, updateTimesheet,
		arg.WorkDate,
		arg.HoursWorked,
		arg.Description,
		arg.ID,
	)
	return err
}
