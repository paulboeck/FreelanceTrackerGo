// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"time"
)

const deleteClient = `-- name: DeleteClient :exec
UPDATE client 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getAllClients = `-- name: GetAllClients :many
SELECT id, name, updated_at, created_at, deleted_at 
FROM client 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

type GetAllClientsRow struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt interface{} `json:"deleted_at"`
}

func (q *Queries) GetAllClients(ctx context.Context) ([]GetAllClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllClientsRow{}
	for rows.Next() {
		var i GetAllClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClient = `-- name: GetClient :one
SELECT id, name, updated_at, created_at, deleted_at 
FROM client 
WHERE id = ? AND deleted_at IS NULL
`

type GetClientRow struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt interface{} `json:"deleted_at"`
}

func (q *Queries) GetClient(ctx context.Context, id int64) (GetClientRow, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i GetClientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertClient = `-- name: InsertClient :execlastid
INSERT INTO client (name) 
VALUES (?)
`

func (q *Queries) InsertClient(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertClient, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateClient = `-- name: UpdateClient :exec
UPDATE client 
SET name = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

type UpdateClientParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.ExecContext(ctx, updateClient, arg.Name, arg.ID)
	return err
}
