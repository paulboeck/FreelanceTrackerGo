// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"time"
)

const getAllClients = `-- name: GetAllClients :many
SELECT id, name, updated_at, created_at 
FROM client 
ORDER BY created_at DESC
`

type GetAllClientsRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetAllClients(ctx context.Context) ([]GetAllClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllClientsRow{}
	for rows.Next() {
		var i GetAllClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClient = `-- name: GetClient :one
SELECT id, name, updated_at, created_at 
FROM client 
WHERE id = ?
`

type GetClientRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetClient(ctx context.Context, id int64) (GetClientRow, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i GetClientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertClient = `-- name: InsertClient :one
INSERT INTO client (name) 
VALUES (?)
RETURNING id
`

func (q *Queries) InsertClient(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertClient, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}
