// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"
	"time"
)

const deleteProject = `-- name: DeleteProject :exec
UPDATE project 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, client_id, updated_at, created_at, deleted_at 
FROM project 
WHERE id = ? AND deleted_at IS NULL
`

type GetProjectRow struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	ClientID  int64       `json:"client_id"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt interface{} `json:"deleted_at"`
}

func (q *Queries) GetProject(ctx context.Context, id int64) (GetProjectRow, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i GetProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProjectsByClient = `-- name: GetProjectsByClient :many
SELECT id, name, client_id, updated_at, created_at, deleted_at 
FROM project 
WHERE client_id = ? AND deleted_at IS NULL
ORDER BY created_at DESC
`

type GetProjectsByClientRow struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	ClientID  int64       `json:"client_id"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt interface{} `json:"deleted_at"`
}

func (q *Queries) GetProjectsByClient(ctx context.Context, clientID int64) ([]GetProjectsByClientRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByClient, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProjectsByClientRow{}
	for rows.Next() {
		var i GetProjectsByClientRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :execlastid
INSERT INTO project (name, client_id) 
VALUES (?, ?)
`

type InsertProjectParams struct {
	Name     string `json:"name"`
	ClientID int64  `json:"client_id"`
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertProject, arg.Name, arg.ClientID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateProject = `-- name: UpdateProject :exec
UPDATE project 
SET name = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

type UpdateProjectParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject, arg.Name, arg.ID)
	return err
}
