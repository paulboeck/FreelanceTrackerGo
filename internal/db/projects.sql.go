// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const deleteProject = `-- name: DeleteProject :exec
UPDATE project 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getAllProjectsWithClient = `-- name: GetAllProjectsWithClient :many
SELECT p.id, p.name, p.client_id, p.status, p.hourly_rate, p.deadline, p.scheduled_start,
       p.invoice_cc_email, p.invoice_cc_description, p.schedule_comments,
       p.additional_info, p.additional_info2, p.discount_percent, p.discount_reason,
       p.adjustment_amount, p.adjustment_reason, p.currency_display, 
       p.currency_conversion_rate, p.flat_fee_invoice, p.notes,
       p.updated_at, p.created_at, p.deleted_at,
       c.name as client_name
FROM project p
JOIN client c ON p.client_id = c.id
WHERE p.deleted_at IS NULL AND c.deleted_at IS NULL
ORDER BY p.updated_at DESC
`

type GetAllProjectsWithClientRow struct {
	ID                     int64           `json:"id"`
	Name                   string          `json:"name"`
	ClientID               int64           `json:"client_id"`
	Status                 string          `json:"status"`
	HourlyRate             float64         `json:"hourly_rate"`
	Deadline               sql.NullString  `json:"deadline"`
	ScheduledStart         sql.NullString  `json:"scheduled_start"`
	InvoiceCcEmail         sql.NullString  `json:"invoice_cc_email"`
	InvoiceCcDescription   sql.NullString  `json:"invoice_cc_description"`
	ScheduleComments       sql.NullString  `json:"schedule_comments"`
	AdditionalInfo         sql.NullString  `json:"additional_info"`
	AdditionalInfo2        sql.NullString  `json:"additional_info2"`
	DiscountPercent        sql.NullFloat64 `json:"discount_percent"`
	DiscountReason         sql.NullString  `json:"discount_reason"`
	AdjustmentAmount       sql.NullFloat64 `json:"adjustment_amount"`
	AdjustmentReason       sql.NullString  `json:"adjustment_reason"`
	CurrencyDisplay        string          `json:"currency_display"`
	CurrencyConversionRate float64         `json:"currency_conversion_rate"`
	FlatFeeInvoice         int64           `json:"flat_fee_invoice"`
	Notes                  sql.NullString  `json:"notes"`
	UpdatedAt              time.Time       `json:"updated_at"`
	CreatedAt              time.Time       `json:"created_at"`
	DeletedAt              interface{}     `json:"deleted_at"`
	ClientName             string          `json:"client_name"`
}

func (q *Queries) GetAllProjectsWithClient(ctx context.Context) ([]GetAllProjectsWithClientRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjectsWithClient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllProjectsWithClientRow{}
	for rows.Next() {
		var i GetAllProjectsWithClientRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientID,
			&i.Status,
			&i.HourlyRate,
			&i.Deadline,
			&i.ScheduledStart,
			&i.InvoiceCcEmail,
			&i.InvoiceCcDescription,
			&i.ScheduleComments,
			&i.AdditionalInfo,
			&i.AdditionalInfo2,
			&i.DiscountPercent,
			&i.DiscountReason,
			&i.AdjustmentAmount,
			&i.AdjustmentReason,
			&i.CurrencyDisplay,
			&i.CurrencyConversionRate,
			&i.FlatFeeInvoice,
			&i.Notes,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.ClientName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT id, name, client_id, status, hourly_rate, deadline, scheduled_start,
       invoice_cc_email, invoice_cc_description, schedule_comments,
       additional_info, additional_info2, discount_percent, discount_reason,
       adjustment_amount, adjustment_reason, currency_display, 
       currency_conversion_rate, flat_fee_invoice, notes,
       updated_at, created_at, deleted_at 
FROM project 
WHERE id = ? AND deleted_at IS NULL
`

type GetProjectRow struct {
	ID                     int64           `json:"id"`
	Name                   string          `json:"name"`
	ClientID               int64           `json:"client_id"`
	Status                 string          `json:"status"`
	HourlyRate             float64         `json:"hourly_rate"`
	Deadline               sql.NullString  `json:"deadline"`
	ScheduledStart         sql.NullString  `json:"scheduled_start"`
	InvoiceCcEmail         sql.NullString  `json:"invoice_cc_email"`
	InvoiceCcDescription   sql.NullString  `json:"invoice_cc_description"`
	ScheduleComments       sql.NullString  `json:"schedule_comments"`
	AdditionalInfo         sql.NullString  `json:"additional_info"`
	AdditionalInfo2        sql.NullString  `json:"additional_info2"`
	DiscountPercent        sql.NullFloat64 `json:"discount_percent"`
	DiscountReason         sql.NullString  `json:"discount_reason"`
	AdjustmentAmount       sql.NullFloat64 `json:"adjustment_amount"`
	AdjustmentReason       sql.NullString  `json:"adjustment_reason"`
	CurrencyDisplay        string          `json:"currency_display"`
	CurrencyConversionRate float64         `json:"currency_conversion_rate"`
	FlatFeeInvoice         int64           `json:"flat_fee_invoice"`
	Notes                  sql.NullString  `json:"notes"`
	UpdatedAt              time.Time       `json:"updated_at"`
	CreatedAt              time.Time       `json:"created_at"`
	DeletedAt              interface{}     `json:"deleted_at"`
}

func (q *Queries) GetProject(ctx context.Context, id int64) (GetProjectRow, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i GetProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.Status,
		&i.HourlyRate,
		&i.Deadline,
		&i.ScheduledStart,
		&i.InvoiceCcEmail,
		&i.InvoiceCcDescription,
		&i.ScheduleComments,
		&i.AdditionalInfo,
		&i.AdditionalInfo2,
		&i.DiscountPercent,
		&i.DiscountReason,
		&i.AdjustmentAmount,
		&i.AdjustmentReason,
		&i.CurrencyDisplay,
		&i.CurrencyConversionRate,
		&i.FlatFeeInvoice,
		&i.Notes,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProjectsByClient = `-- name: GetProjectsByClient :many
SELECT id, name, client_id, status, hourly_rate, deadline, scheduled_start,
       invoice_cc_email, invoice_cc_description, schedule_comments,
       additional_info, additional_info2, discount_percent, discount_reason,
       adjustment_amount, adjustment_reason, currency_display, 
       currency_conversion_rate, flat_fee_invoice, notes,
       updated_at, created_at, deleted_at 
FROM project 
WHERE client_id = ? AND deleted_at IS NULL
ORDER BY updated_at DESC
`

type GetProjectsByClientRow struct {
	ID                     int64           `json:"id"`
	Name                   string          `json:"name"`
	ClientID               int64           `json:"client_id"`
	Status                 string          `json:"status"`
	HourlyRate             float64         `json:"hourly_rate"`
	Deadline               sql.NullString  `json:"deadline"`
	ScheduledStart         sql.NullString  `json:"scheduled_start"`
	InvoiceCcEmail         sql.NullString  `json:"invoice_cc_email"`
	InvoiceCcDescription   sql.NullString  `json:"invoice_cc_description"`
	ScheduleComments       sql.NullString  `json:"schedule_comments"`
	AdditionalInfo         sql.NullString  `json:"additional_info"`
	AdditionalInfo2        sql.NullString  `json:"additional_info2"`
	DiscountPercent        sql.NullFloat64 `json:"discount_percent"`
	DiscountReason         sql.NullString  `json:"discount_reason"`
	AdjustmentAmount       sql.NullFloat64 `json:"adjustment_amount"`
	AdjustmentReason       sql.NullString  `json:"adjustment_reason"`
	CurrencyDisplay        string          `json:"currency_display"`
	CurrencyConversionRate float64         `json:"currency_conversion_rate"`
	FlatFeeInvoice         int64           `json:"flat_fee_invoice"`
	Notes                  sql.NullString  `json:"notes"`
	UpdatedAt              time.Time       `json:"updated_at"`
	CreatedAt              time.Time       `json:"created_at"`
	DeletedAt              interface{}     `json:"deleted_at"`
}

func (q *Queries) GetProjectsByClient(ctx context.Context, clientID int64) ([]GetProjectsByClientRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByClient, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProjectsByClientRow{}
	for rows.Next() {
		var i GetProjectsByClientRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientID,
			&i.Status,
			&i.HourlyRate,
			&i.Deadline,
			&i.ScheduledStart,
			&i.InvoiceCcEmail,
			&i.InvoiceCcDescription,
			&i.ScheduleComments,
			&i.AdditionalInfo,
			&i.AdditionalInfo2,
			&i.DiscountPercent,
			&i.DiscountReason,
			&i.AdjustmentAmount,
			&i.AdjustmentReason,
			&i.CurrencyDisplay,
			&i.CurrencyConversionRate,
			&i.FlatFeeInvoice,
			&i.Notes,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :execlastid
INSERT INTO project (
    name, client_id, status, hourly_rate, deadline, scheduled_start,
    invoice_cc_email, invoice_cc_description, schedule_comments,
    additional_info, additional_info2, discount_percent, discount_reason,
    adjustment_amount, adjustment_reason, currency_display, 
    currency_conversion_rate, flat_fee_invoice, notes
) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertProjectParams struct {
	Name                   string          `json:"name"`
	ClientID               int64           `json:"client_id"`
	Status                 string          `json:"status"`
	HourlyRate             float64         `json:"hourly_rate"`
	Deadline               sql.NullString  `json:"deadline"`
	ScheduledStart         sql.NullString  `json:"scheduled_start"`
	InvoiceCcEmail         sql.NullString  `json:"invoice_cc_email"`
	InvoiceCcDescription   sql.NullString  `json:"invoice_cc_description"`
	ScheduleComments       sql.NullString  `json:"schedule_comments"`
	AdditionalInfo         sql.NullString  `json:"additional_info"`
	AdditionalInfo2        sql.NullString  `json:"additional_info2"`
	DiscountPercent        sql.NullFloat64 `json:"discount_percent"`
	DiscountReason         sql.NullString  `json:"discount_reason"`
	AdjustmentAmount       sql.NullFloat64 `json:"adjustment_amount"`
	AdjustmentReason       sql.NullString  `json:"adjustment_reason"`
	CurrencyDisplay        string          `json:"currency_display"`
	CurrencyConversionRate float64         `json:"currency_conversion_rate"`
	FlatFeeInvoice         int64           `json:"flat_fee_invoice"`
	Notes                  sql.NullString  `json:"notes"`
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertProject,
		arg.Name,
		arg.ClientID,
		arg.Status,
		arg.HourlyRate,
		arg.Deadline,
		arg.ScheduledStart,
		arg.InvoiceCcEmail,
		arg.InvoiceCcDescription,
		arg.ScheduleComments,
		arg.AdditionalInfo,
		arg.AdditionalInfo2,
		arg.DiscountPercent,
		arg.DiscountReason,
		arg.AdjustmentAmount,
		arg.AdjustmentReason,
		arg.CurrencyDisplay,
		arg.CurrencyConversionRate,
		arg.FlatFeeInvoice,
		arg.Notes,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateProject = `-- name: UpdateProject :exec
UPDATE project 
SET name = ?, status = ?, hourly_rate = ?, deadline = ?, scheduled_start = ?,
    invoice_cc_email = ?, invoice_cc_description = ?, schedule_comments = ?,
    additional_info = ?, additional_info2 = ?, discount_percent = ?, discount_reason = ?,
    adjustment_amount = ?, adjustment_reason = ?, currency_display = ?, 
    currency_conversion_rate = ?, flat_fee_invoice = ?, notes = ?,
    updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND deleted_at IS NULL
`

type UpdateProjectParams struct {
	Name                   string          `json:"name"`
	Status                 string          `json:"status"`
	HourlyRate             float64         `json:"hourly_rate"`
	Deadline               sql.NullString  `json:"deadline"`
	ScheduledStart         sql.NullString  `json:"scheduled_start"`
	InvoiceCcEmail         sql.NullString  `json:"invoice_cc_email"`
	InvoiceCcDescription   sql.NullString  `json:"invoice_cc_description"`
	ScheduleComments       sql.NullString  `json:"schedule_comments"`
	AdditionalInfo         sql.NullString  `json:"additional_info"`
	AdditionalInfo2        sql.NullString  `json:"additional_info2"`
	DiscountPercent        sql.NullFloat64 `json:"discount_percent"`
	DiscountReason         sql.NullString  `json:"discount_reason"`
	AdjustmentAmount       sql.NullFloat64 `json:"adjustment_amount"`
	AdjustmentReason       sql.NullString  `json:"adjustment_reason"`
	CurrencyDisplay        string          `json:"currency_display"`
	CurrencyConversionRate float64         `json:"currency_conversion_rate"`
	FlatFeeInvoice         int64           `json:"flat_fee_invoice"`
	Notes                  sql.NullString  `json:"notes"`
	ID                     int64           `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Status,
		arg.HourlyRate,
		arg.Deadline,
		arg.ScheduledStart,
		arg.InvoiceCcEmail,
		arg.InvoiceCcDescription,
		arg.ScheduleComments,
		arg.AdditionalInfo,
		arg.AdditionalInfo2,
		arg.DiscountPercent,
		arg.DiscountReason,
		arg.AdjustmentAmount,
		arg.AdjustmentReason,
		arg.CurrencyDisplay,
		arg.CurrencyConversionRate,
		arg.FlatFeeInvoice,
		arg.Notes,
		arg.ID,
	)
	return err
}
